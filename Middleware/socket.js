const WebSocket = require("ws");

let drivers = [];
let customers = [];

function initWebSocket(server) {
  const wss = new WebSocket.Server({ server, path: "/ws" });

  wss.on("connection", (ws) => {
    console.log("üöÄ M·ªôt client ƒë√£ k·∫øt n·ªëi WebSocket");

    ws.on("message", (message) => {
      let data;
      try {
        data = JSON.parse(message);
      } catch (err) {
        console.error("‚ùå L·ªói parse JSON:", err);
        return;
      }

      // L·∫ßn ƒë·∫ßu k·∫øt n·ªëi: g√°n role
      if (!ws.role && data.type) {
        ws.role = data.type;
        console.log(`‚úÖ Client x√°c ƒë·ªãnh vai tr√≤: ${ws.role}`);

        if (ws.role === "driver") drivers.push(ws);
        if (ws.role === "customer") customers.push(ws);

        console.log(
          `Hi·ªán t·∫°i c√≥ ${drivers.length} driver(s), ${customers.length} customer(s)`
        );
        return;
      }

      // N·∫øu l√† driver th√¨ broadcast location cho t·∫•t c·∫£ customers
      if (ws.role === "driver") {
        const locationPayload = {
          lat: data.lat,
          lng: data.lng,
          speed: data.speed ?? 0,
          status: data.status || "unknown",
          updatedAt: data.updatedAt || new Date().toISOString(),
        };

        console.log("üìç Driver g·ª≠i d·ªØ li·ªáu:", locationPayload);

        customers.forEach((customer) => {
          if (customer.readyState === WebSocket.OPEN) {
            customer.send(JSON.stringify(locationPayload));
            console.log("‚û°Ô∏è ƒê√£ g·ª≠i t·ªõi kh√°ch h√†ng:", locationPayload);
          }
        });
      }
    });

    ws.on("close", () => {
      drivers = drivers.filter((d) => d !== ws);
      customers = customers.filter((c) => c !== ws);
      console.log("‚ùå Client ng·∫Øt k·∫øt n·ªëi");
    });
  });
}

module.exports = initWebSocket;
